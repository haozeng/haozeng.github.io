<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Object-oriented-design | Hao's Blog]]></title>
  <link href="http://haozeng.github.io/blog/categories/object-oriented-design/atom.xml" rel="self"/>
  <link href="http://haozeng.github.io/"/>
  <updated>2014-06-10T21:47:58-07:00</updated>
  <id>http://haozeng.github.io/</id>
  <author>
    <name><![CDATA[Hao Zeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Email Predictor]]></title>
    <link href="http://haozeng.github.io/blog/2014/05/28/email-predictor/"/>
    <updated>2014-05-28T10:13:51-07:00</updated>
    <id>http://haozeng.github.io/blog/2014/05/28/email-predictor</id>
    <content type="html"><![CDATA[<p>I wrote a email predictor recently which Given the following sample dataset:</p>

<p><code>ruby
{
  "John Ferguson" =&gt; "john.ferguson@alphasights.com",
  "Damon Aw" =&gt; "damon.aw@alphasights.com",
  "Linda Li" =&gt; "linda.li@alphasights.com",
  "Larry Page" =&gt; "larry.p@google.com",
  "Sergey Brin" =&gt; "s.brin@google.com",
  "Steve Jobs" =&gt; "s.j@apple.com"
}
</code></p>

<p>It will Predict the email addresses for the following advisors:</p>

<p><code>ruby
"Peter Wong", "alphasights.com"
"Craig Silverstein", "google.com"
"Steve Wozniak", "apple.com"
"Barack Obama", "whitehouse.gov"
</code></p>

<p>The solution is designed to be object-oriented, and it composes three parts: Pattern, Analyzer and Predictor.</p>

<p>A Pattern handles all business logic related with first_name and last_name in this case.
Its responsibility is solely designed to fulfill the purpose of looking for/predictoring patterns based on first_name and last_name.
In our case, there are four cases, which are first_name_dot_last_name, first_name_dot_last_initial, first_initial_dot_last_initial, first_initial_dot_last_name.</p>

<p>A Analyzer should be created with a raw dataset and a pattern,
and based on instructions defined in patterns, analyzer generate dataset which can be used for further prediction process.</p>

<p>A Predictor should be created with a dataset and a pattern, and its &lsquo;#formulate&rsquo; method will take a name and company as input,
and based on exisiting pattern which is processed and stored in dataset, it will predict email addresses for the given name and company.</p>

<p>The philosiphy behind this can be interpreted in this way:
Pattern can easily be replaced with other patterns or a pattern can easily to modifed to accept more business logic based on other attributes.
Analyzer should only care about its given pattern and its given raw data, and generate a dataset.
Predictor should only caret about its given pattern and its given dataset.
Analyzer and Predictor should not know each other.</p>

<p>```ruby
require &lsquo;pry&rsquo;
require &lsquo;pp&rsquo;</p>

<p>class Pattern
  attr_reader :first_name, :last_name</p>

<p>  def split(name)</p>

<pre><code>@first_name, @last_name = name.split(/[.|\s{1}]/)
</code></pre>

<p>  end</p>

<p>  def find</p>

<pre><code>[first_part, last_part].join('_dot_').to_sym
</code></pre>

<p>  end</p>

<p>  def predict(pattern)</p>

<pre><code>%w(first_initial first_name last_initial last_name).inject([]) do |memo, params|
  memo &lt;&lt; send(params) if pattern.to_s =~ /#{params}/
  memo
end.join('.')
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def first_initial</p>

<pre><code>@first_name[0]
</code></pre>

<p>  end</p>

<p>  def last_initial</p>

<pre><code>@last_name[0]
</code></pre>

<p>  end</p>

<p>  def first_part</p>

<pre><code>@first_name.length == 1 ? 'first_initial' : 'first_name'
</code></pre>

<p>  end</p>

<p>  def last_part</p>

<pre><code>@last_name.length == 1 ? 'last_initial' : 'last_name'
</code></pre>

<p>  end
end</p>

<p>class Analyzer
  attr_reader :dataset, :pattern</p>

<p>  def initialize(attributes)</p>

<pre><code>@dataset = {}
@pattern = attributes[:pattern]
</code></pre>

<p>  end</p>

<p>  def process(raw_data)</p>

<pre><code>raw_data.each do |_, email_address|
  name, email = email_address.split('@')
  @pattern.split(name)
  pattern = @pattern.find

  @dataset[email] ||= []
  @dataset[email] &lt;&lt; pattern unless @dataset[email].include?(pattern)
end
</code></pre>

<p>  end
end</p>

<p>class Predictor
  attr_reader :pattern, :dataset</p>

<p>  def initialize(attributes)</p>

<pre><code>@dataset = attributes[:dataset]
@pattern = attributes[:pattern]
</code></pre>

<p>  end</p>

<p>  def formulate(attributes)</p>

<pre><code>name = attributes[:name].downcase
email = attributes[:email]

return "There is no matching in dataset for #{attributes[:name]} working for #{email}" if @dataset[email].nil?

@dataset[email].map do |pattern|
  @pattern.split(name)
  @pattern.predict(pattern) + "@#{email}"
end
</code></pre>

<p>  end
end</p>

<h1>Instructions to run:</h1>

<p>raw =
{
  &ldquo;John Ferguson&rdquo; => &ldquo;<a href="&#x6d;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#106;&#x6f;&#x68;&#110;&#x2e;&#102;&#x65;&#x72;&#x67;&#117;&#x73;&#111;&#110;&#64;&#97;&#x6c;&#x70;&#104;&#x61;&#115;&#x69;&#103;&#104;&#x74;&#x73;&#46;&#x63;&#111;&#109;">&#106;&#x6f;&#104;&#110;&#x2e;&#102;&#x65;&#x72;&#x67;&#117;&#115;&#x6f;&#110;&#64;&#x61;&#108;&#x70;&#x68;&#97;&#x73;&#105;&#103;&#104;&#116;&#115;&#x2e;&#x63;&#111;&#109;</a>&rdquo;,
  &ldquo;Damon Aw&rdquo; => &ldquo;<a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#100;&#97;&#x6d;&#x6f;&#110;&#x2e;&#x61;&#119;&#64;&#97;&#x6c;&#x70;&#x68;&#x61;&#115;&#x69;&#x67;&#x68;&#x74;&#x73;&#46;&#99;&#x6f;&#x6d;">&#x64;&#97;&#109;&#111;&#110;&#x2e;&#x61;&#x77;&#x40;&#97;&#108;&#x70;&#104;&#x61;&#115;&#105;&#103;&#x68;&#x74;&#x73;&#46;&#x63;&#x6f;&#x6d;</a>&rdquo;,
  &ldquo;Linda Li&rdquo; => &ldquo;<a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#108;&#x69;&#110;&#100;&#97;&#x2e;&#108;&#x69;&#64;&#97;&#x6c;&#x70;&#104;&#x61;&#x73;&#105;&#x67;&#104;&#x74;&#115;&#46;&#x63;&#x6f;&#x6d;">&#x6c;&#105;&#x6e;&#100;&#x61;&#x2e;&#108;&#x69;&#64;&#97;&#108;&#112;&#x68;&#97;&#x73;&#x69;&#103;&#x68;&#x74;&#x73;&#46;&#99;&#x6f;&#x6d;</a>&rdquo;,
  &ldquo;Larry Page&rdquo; => &ldquo;<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x6c;&#x61;&#114;&#114;&#121;&#x2e;&#112;&#x40;&#103;&#x6f;&#x6f;&#103;&#108;&#x65;&#46;&#99;&#111;&#x6d;">&#x6c;&#x61;&#x72;&#x72;&#121;&#46;&#112;&#x40;&#x67;&#111;&#x6f;&#103;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a>&rdquo;,
  &ldquo;Sergey Brin&rdquo; => &ldquo;<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#x73;&#46;&#x62;&#x72;&#105;&#110;&#64;&#x67;&#x6f;&#x6f;&#x67;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;">&#x73;&#x2e;&#x62;&#x72;&#105;&#110;&#64;&#x67;&#111;&#x6f;&#103;&#108;&#101;&#46;&#x63;&#111;&#x6d;</a>&rdquo;,
  &ldquo;Steve Jobs&rdquo; => &ldquo;<a href="&#109;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#115;&#x2e;&#106;&#x40;&#97;&#112;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;">&#x73;&#x2e;&#106;&#64;&#x61;&#112;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#109;</a>&rdquo;
}</p>

<h1>Create a analyzer object and give it a pattern</h1>

<p>analyzer = Analyzer.new(pattern: Pattern.new)</p>

<h1>Analyze the given dataset</h1>

<p>analyzer.process(raw)</p>

<h1>Create a predictor object and give it a dataset and a pattern</h1>

<p>predictor = Predictor.new(dataset: analyzer.dataset, pattern: Pattern.new)</p>

<h1>Formulate potential patterns for given name and email</h1>

<p>pp predictor.formulate(name: &lsquo;Criag Silverstein&rsquo;, email: &lsquo;google.com&rsquo;)
pp predictor.formulate(name: &lsquo;Peter Wong&rsquo;, email: &lsquo;alphasights.com&rsquo;)
pp predictor.formulate(name: &lsquo;Steve Wozniak&rsquo;, email: &lsquo;apple.com&rsquo;)
pp predictor.formulate(name: &lsquo;Barack Obama&rsquo;, email: &lsquo;whitehouse.gov&rsquo;)</p>

<p>```</p>

<p>Specs</p>

<p>```ruby</p>

<h1>Instruction to run test:</h1>

<h1>rspec -fd email_predictor_spec.rb</h1>

<p>require &lsquo;./email_predictor&rsquo;</p>

<p>describe Pattern do
  let(:pattern) { Pattern.new }</p>

<p>  it &lsquo;should respond to first name&rsquo; do</p>

<pre><code>expect(pattern).to respond_to(:first_name)
</code></pre>

<p>  end</p>

<p>  it &lsquo;should respond to last name&rsquo; do</p>

<pre><code>expect(pattern).to respond_to(:last_name)
</code></pre>

<p>  end</p>

<p>  describe &lsquo;#split&rsquo; do</p>

<pre><code>it 'should split name into first_name and last_name if name is separted by white space' do
  pattern.split('John Ferguson')
  expect(pattern.first_name).to eql('John')
  expect(pattern.last_name).to eql('Ferguson')
end

it 'should split name into first_name and last_name if name is separted by .' do
  pattern.split('steve.jobs')
  expect(pattern.first_name).to eql('steve')
  expect(pattern.last_name).to eql('jobs')
end
</code></pre>

<p>  end</p>

<p>  describe &lsquo;#find&rsquo; do</p>

<pre><code>it 'should generate pattern if first and last are full' do
  pattern.split('john.ferguson')
  expect(pattern.find).to eql(:first_name_dot_last_name)
end

it 'should generate pattern if first is initial and last is full' do
  pattern.split('j.ferguson')
  expect(pattern.find).to eql(:first_initial_dot_last_name)
end

it 'should generate pattern if first is full and last are initial' do
  pattern.split('john.f')
  expect(pattern.find).to eql(:first_name_dot_last_initial)
end

it 'should generate pattern if both are initial' do
  pattern.split('j.f')
  expect(pattern.find).to eql(:first_initial_dot_last_initial)
end
</code></pre>

<p>  end</p>

<p>  describe &lsquo;#predict&rsquo; do</p>

<pre><code>it 'should be able to predict for first_name_dot_last_name' do
  pattern.split('john ferguson')
  expect(pattern.predict(:first_name_dot_last_name)).to eql('john.ferguson')
end

it 'should be able to predict for first_initial_dot_last_name' do
  pattern.split('john ferguson')
  expect(pattern.predict(:first_initial_dot_last_name)).to eql('j.ferguson')
end

it 'should be able to predict for first_name_dot_last_initial' do
  pattern.split('john ferguson')
  expect(pattern.predict(:first_name_dot_last_initial)).to eql('john.f')
end

it 'should be able to predict for first_initial_dot_last_initial' do
  pattern.split('john ferguson')
  expect(pattern.predict(:first_initial_dot_last_initial)).to eql('j.f')
end
</code></pre>

<p>  end
end</p>

<p>describe Analyzer do</p>

<p>  let(:pattern) { Pattern.new }
  let(:analyzer) { Analyzer.new pattern: pattern }</p>

<p>  it &lsquo;should respond to dataset&rsquo; do</p>

<pre><code>expect(analyzer).to respond_to(:dataset)
</code></pre>

<p>  end</p>

<p>  it &lsquo;should use hash as dataset&rsquo; do</p>

<pre><code>expect(analyzer.dataset).to be_a(Hash)
</code></pre>

<p>  end</p>

<p>  it &lsquo;should respond to raw data&rsquo; do</p>

<pre><code>expect(analyzer).to respond_to(:pattern)
</code></pre>

<p>  end</p>

<p>  describe &lsquo;#process&rsquo; do</p>

<pre><code>let(:raw) { { "John Ferguson" =&gt; "john.ferguson@alphasights.com" } }

it 'should use pattern to split name and find pattern' do
  pattern.should_receive(:split)
  pattern.should_receive(:find).and_return(:first_name_dot_last_name)
  analyzer.process(raw)
end

it 'should be able to process data based on given rule' do
  analyzer.process(raw)
  expect(analyzer.dataset.size).to eql(1)
  expect(analyzer.dataset).to eql('alphasights.com' =&gt; [:first_name_dot_last_name])
end

let(:multiple) do
  {
    "John Ferguson" =&gt; "john.ferguson@alphasights.com",
    "Damon Aw" =&gt; "damon.aw@alphasights.com",
    "Linda Li" =&gt; "linda.li@alphasights.com",
    "Larry Page" =&gt; "larry.p@google.com"
  }
end

it 'should be albe to process data for multiple companies' do
  analyzer.process(multiple)
  expect(analyzer.dataset.size).to eql(2)
  expect(analyzer.dataset).to eql('alphasights.com' =&gt; [:first_name_dot_last_name],
                                  'google.com' =&gt; [:first_name_dot_last_initial])
end
</code></pre>

<p>  end
end</p>

<p>describe Predictor do
  let(:pattern) { Pattern.new }
  let(:predictor) { Predictor.new pattern: pattern }</p>

<p>  it &lsquo;should respond to dataset&rsquo; do</p>

<pre><code>expect(predictor).to respond_to(:dataset)
</code></pre>

<p>  end</p>

<p>  it &lsquo;should respond to pattern&rsquo; do</p>

<pre><code>expect(predictor).to respond_to(:pattern)
</code></pre>

<p>  end</p>

<p>  describe &lsquo;#formulate&rsquo; do</p>

<pre><code>it 'should not formulate a email address if company is not given in the dataest' do
  predictor = Predictor.new pattern: pattern, dataset: {}
  attributes = { name: 'Barack Obama', email: 'whitehouse.gov'}
  response = predictor.formulate(attributes)
  expect(response).to eql("There is no matching in dataset for #{attributes[:name]} working for #{attributes[:email]}")
end

it 'should use pattern to split name and predict email' do
  predictor = Predictor.new pattern: pattern, dataset: { 'alphasights.com' =&gt; [:first_name_dot_last_name] }
  attributes = { name: 'Peter Wong', email: 'alphasights.com'}
  pattern.should_receive(:split).and_return(true)
  pattern.should_receive(:predict).and_return('peter.wong')
  predictor.formulate(attributes)
end

it 'should predict email address based if one pattern exist' do
  predictor = Predictor.new pattern: pattern, dataset: { 'alphasights.com' =&gt; [:first_name_dot_last_name] }
  attributes = { name: 'Peter Wong', email: 'alphasights.com'}
  response = predictor.formulate(attributes)
  expect(response).to eql(['peter.wong@alphasights.com'])
end

it 'should predict email address based if multiple patterns exist' do
  predictor = Predictor.new pattern: pattern, dataset: { 'google.com' =&gt; [:first_name_dot_last_initial, :first_initial_dot_last_name] }
  attributes = { name: 'Criag Silverstein', email: 'google.com' }
  response = predictor.formulate(attributes)
  expect(response).to match_array(['c.silverstein@google.com', 'criag.s@google.com'])
end
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Streaming Retweets]]></title>
    <link href="http://haozeng.github.io/blog/2013/05/08/twitter-streaming-retweets/"/>
    <updated>2013-05-08T22:46:49-07:00</updated>
    <id>http://haozeng.github.io/blog/2013/05/08/twitter-streaming-retweets</id>
    <content type="html"><![CDATA[<p>Recently, I did an exercise using twitter streaming api to generate the most recent 10
retweets in the past n minutes.</p>

<p>The program is pretty simple. It sends http streaming requests to twitter api and doing sorting in the background thread, while the main thread is printing out the most recent 10 retweets.</p>

<p>```ruby</p>

<p>require &lsquo;twitter&rsquo;
require &lsquo;pry&rsquo;
require &lsquo;pp&rsquo;</p>

<p>class Streamer
  attr_reader :client, :background_thread, :mins, :container</p>

<p>  def initialize(attributes)</p>

<pre><code>@client = attributes[:client]
@mins = attributes[:mins]
@container = attributes[:container]
</code></pre>

<p>  end</p>

<p>  def stream</p>

<pre><code>@background_thread = Thread.new do
  @client.sample do |object|
    if object.is_a?(Twitter::Tweet)
      @container[object.created_at] ||= []
      @container[object.created_at] &lt;&lt; object.text
    end
    # Container will only keep tweets which are 5 mins up to date
    @container.keep_if {|time, tweet| @mins * 60 &gt; Time.now - time}
  end
end
</code></pre>

<p>  end</p>

<p>  def stop</p>

<pre><code>Thread.kill(@background_thread)
</code></pre>

<p>  end
end</p>

<p>class Massager
  attr_reader :raw_tweets, :top_tweets, :container</p>

<p>  def initialize(attributes)</p>

<pre><code>@container = attributes[:container]
</code></pre>

<p>  end</p>

<p>  def top_tweets</p>

<pre><code>build
sort
format
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def build</p>

<pre><code>@raw_tweets = Hash.new(0)
@container.values.flatten.each do |tweet|
  @raw_tweets[tweet] += 1
end
</code></pre>

<p>  end</p>

<p>  def sort</p>

<pre><code>@raw_tweets = @raw_tweets.sort{|a,b| a[1] &lt;=&gt; b[1]}.last(10)
</code></pre>

<p>  end</p>

<p>  def format</p>

<pre><code>@raw_tweets.inject({}) do |memo, value|
  memo[value[1]] ||= []
  memo[value[1]] &lt;&lt; value[0]
  memo
end
</code></pre>

<p>  end
end</p>

<p>class Manager
  attr_reader :container, :streamer, :massager</p>

<p>  def initialize(attributes)</p>

<pre><code>@container = {}
@streamer = Streamer.new(container: @container, mins: attributes[:mins], client: attributes[:client])
@massager = Massager.new(container: @container)
</code></pre>

<p>  end
end</p>

<p>client = Twitter::Streaming::Client.new do |config|
  config.consumer_key        = &ldquo;#&rdquo;
  config.consumer_secret     = &ldquo;#&rdquo;
  config.access_token        = &ldquo;#&rdquo;
  config.access_token_secret = &ldquo;#&rdquo;
end</p>

<p>mins = 1
manager = Manager.new(mins: mins, client: client)
manager.streamer.stream</p>

<p>start_time = Time.now
loop do
  window_start = Time.now &ndash; start_time > 60<em>mins ? Time.now &ndash; 60</em>mins : start_time
  sleep(1)
  puts &ldquo;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; Top Ten Tweets from #{window_start} To #{Time.now} &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;&rdquo;
  pp manager.massager.top_tweets
end</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
