<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Hao's Blog]]></title>
  <link href="http://haozeng.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://haozeng.github.io/"/>
  <updated>2014-06-11T16:00:53-07:00</updated>
  <id>http://haozeng.github.io/</id>
  <author>
    <name><![CDATA[Hao Zeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extract Values From Javascript Nested Object]]></title>
    <link href="http://haozeng.github.io/blog/2014/03/23/test/"/>
    <updated>2014-03-23T11:00:09-07:00</updated>
    <id>http://haozeng.github.io/blog/2014/03/23/test</id>
    <content type="html"><![CDATA[<p>Underscore doesn&rsquo;t support search and find nested value in a nested javascript object,
So I went ahead and built a version for that:</p>

<p>``` coffeescript</p>

<h1>This helper is served to relieve the efforts of building up external formatted object through</h1>

<h1>nested object which we retrieve from mongoDB or http params</h1>

<h1>Usage:</h1>

<h1>SampleData =</h1>

<h1>token: &lsquo;1234&rsquo;,</h1>

<h1>user:</h1>

<h1>token: &lsquo;4321&rsquo;</h1>

<h1>contact:</h1>

<h1>address:</h1>

<h1>city: &lsquo;Emeryville&rsquo;</h1>

<h1>state: &lsquo;CA&rsquo;</h1>

<h1>zip_code: &lsquo;51421&rsquo;</h1>

<h1>All we need to do is</h1>

<h1>Helper.DataPicker(SampleData, &lsquo;token&rsquo;, &lsquo;user.token&rsquo;, &lsquo;city&rsquo;)</h1>

<h1>For nested key with the duplicated names, we need to nest the top parents nodes as well.</h1>

<h1>For example &lsquo;user.token&rsquo;</h1>

<p>_ = require &lsquo;underscore&rsquo;</p>

<p>DataPicker = (data, attributes&hellip;) &ndash;></p>

<p>  result = {}</p>

<p>  # Loop through each pair of data and find the matching attributes
  _.each data, (value, key, list) &ndash;></p>

<pre><code>if _.contains(attributes, key) and (!_.isObject(list[key]) or _.isArray(value))
  result[key] ||= value
else if _.isObject(value) and !_.isArray(value)
  for subKey, subValue of value
    arguments.callee(subValue, subKey, value)
</code></pre>

<p>  # Loop through nested cases like user.token, merchant.token
  _.each attributes, (attribute) &ndash;></p>

<pre><code>if attribute.match(/^[a-z]+[.]/)
  keys = attribute.split('.')
  element = keys.join('_')
  nestedElement = _.reduce(keys, (memo, num) -&gt;
    if !_.isUndefined(memo)
      memo = memo[num]
  , data)

  result[element] = nestedElement if !_.isUndefined(nestedElement)
</code></pre>

<p>  return result</p>

<p>module.exports = DataPicker</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotx and Compromise]]></title>
    <link href="http://haozeng.github.io/blog/2013/09/27/rotx-and-compromise/"/>
    <updated>2013-09-27T20:36:18-07:00</updated>
    <id>http://haozeng.github.io/blog/2013/09/27/rotx-and-compromise</id>
    <content type="html"><![CDATA[<p>Rotx exercise:</p>

<p>``` ruby
def rotx(x, string, encrypt=true)
  letters = (&lsquo;a&rsquo;..&lsquo;z&rsquo;).to_a</p>

<p>  string.split(&lsquo;&rsquo;).map! do |letter|</p>

<pre><code>if letter.match(/[a-zA-Z]/)
  # Looking for index
  index = letter == letter.downcase ? letters.index(letter) : letters.index(letter.downcase)

  # Building rotated index either by moving forward or backward
  rotated_index = encrypt ? (index + x)%26 : (index - x)%26

  # Building new letter based on rotated index
  letter == letter.downcase ? letters[rotated_index] : letters[rotated_index].upcase
else
  letter
end
</code></pre>

<p>  end.join
end</p>

<p>describe &lsquo;Test #rotx&rsquo; do
  it &lsquo;should rotate the string and encrypt as default&rsquo; do</p>

<pre><code>rotx(10, 'Hello, World').should eql 'Rovvy, Gybvn'
</code></pre>

<p>  end</p>

<p>  it &lsquo;should rotate back the string if encrypt is false&rsquo; do</p>

<pre><code>rotx(10, 'Rovvy, Gybvn', false).should eql 'Hello, World'
</code></pre>

<p>  end</p>

<p>  it &lsquo;should return the same results if roration number is added 26&rsquo; do</p>

<pre><code>rotx(36, 'Hello, World').should eql 'Rovvy, Gybvn'
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>A simple compromise implementation, and this will build the foundation in removing callbacks in node.js app.</p>

<p>``` javascript
Promise = function () {
  this.value;
  this.callbacks = [];
};</p>

<p>Promise.prototype.resolve = function(result) {
  if (this.value) {</p>

<pre><code>throw new Error('A promise should only be able to be resolved once !');
</code></pre>

<p>  } else {</p>

<pre><code>this.value = result;
</code></pre>

<p>  }
  if (this.callbacks.length > 0) {</p>

<pre><code>this.triggerCallbacks();
</code></pre>

<p>  }
};</p>

<p>Promise.prototype.success = function(fn) {
  this.callbacks.push(fn);</p>

<p>  if (this.value) {</p>

<pre><code>this.triggerCallbacks();
</code></pre>

<p>  }
};</p>

<p>Promise.prototype.triggerCallbacks = function() {
  var self = this;</p>

<p>  this.callbacks.forEach(function(callback) {</p>

<pre><code>callback.call(self,self.value);
</code></pre>

<p>  });
}</p>

<p>var foo = new Promise();
var bar = new Promise();</p>

<p>foo.resolve(&lsquo;hello&rsquo;);</p>

<p>setTimeout(function(){
  bar.resolve(&lsquo;world&rsquo;);
}, 500);</p>

<p>foo.success(function(result){
  console.log(result);
});</p>

<p>bar.success(function(result){
  console.log(result);
});</p>

<p>// Throw errors if one promise tries to resolve twice</p>

<p>var foobar = new Promise();
foobar.resolve(&lsquo;hello&rsquo;);
foobar.resolve(&lsquo;world&rsquo;);
```</p>
]]></content>
  </entry>
  
</feed>
