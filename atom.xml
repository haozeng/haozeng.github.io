<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hao's Blog]]></title>
  <link href="http://haozeng.github.io/atom.xml" rel="self"/>
  <link href="http://haozeng.github.io/"/>
  <updated>2014-06-11T10:50:28-07:00</updated>
  <id>http://haozeng.github.io/</id>
  <author>
    <name><![CDATA[Hao Zeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Email Predictor]]></title>
    <link href="http://haozeng.github.io/blog/2014/05/28/email-predictor/"/>
    <updated>2014-05-28T10:13:51-07:00</updated>
    <id>http://haozeng.github.io/blog/2014/05/28/email-predictor</id>
    <content type="html"><![CDATA[<p>I wrote a email predictor recently which Given the following sample dataset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;John Ferguson&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;john.ferguson@alphasights.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Damon Aw&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;damon.aw@alphasights.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Linda Li&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;linda.li@alphasights.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Larry Page&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;larry.p@google.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Sergey Brin&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;s.brin@google.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Steve Jobs&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;s.j@apple.com&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will Predict the email addresses for the following advisors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Peter Wong&quot;</span><span class="p">,</span> <span class="s2">&quot;alphasights.com&quot;</span>
</span><span class='line'><span class="s2">&quot;Craig Silverstein&quot;</span><span class="p">,</span> <span class="s2">&quot;google.com&quot;</span>
</span><span class='line'><span class="s2">&quot;Steve Wozniak&quot;</span><span class="p">,</span> <span class="s2">&quot;apple.com&quot;</span>
</span><span class='line'><span class="s2">&quot;Barack Obama&quot;</span><span class="p">,</span> <span class="s2">&quot;whitehouse.gov&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The solution is designed to be object-oriented, and it composes three parts: Pattern, Analyzer and Predictor.</p>

<p>A Pattern handles all business logic related with first_name and last_name in this case.
Its responsibility is solely designed to fulfill the purpose of looking for/predictoring patterns based on first_name and last_name.
In our case, there are four cases, which are first_name_dot_last_name, first_name_dot_last_initial, first_initial_dot_last_initial, first_initial_dot_last_name.</p>

<p>A Analyzer should be created with a raw dataset and a pattern,
and based on instructions defined in patterns, analyzer generate dataset which can be used for further prediction process.</p>

<p>A Predictor should be created with a dataset and a pattern, and its &lsquo;#formulate&rsquo; method will take a name and company as input,
and based on exisiting pattern which is processed and stored in dataset, it will predict email addresses for the given name and company.</p>

<p>The philosiphy behind this can be interpreted in this way:
Pattern can easily be replaced with other patterns or a pattern can easily to modifed to accept more business logic based on other attributes.
Analyzer should only care about its given pattern and its given raw data, and generate a dataset.
Predictor should only caret about its given pattern and its given dataset.
Analyzer and Predictor should not know each other.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pp&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Pattern</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span><span class="p">,</span> <span class="vi">@last_name</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/[.|\s{1}]/</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">find</span>
</span><span class='line'>    <span class="o">[</span><span class="n">first_part</span><span class="p">,</span> <span class="n">last_part</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;_dot_&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
</span><span class='line'>    <span class="sx">%w(first_initial first_name last_initial last_name)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="n">params</span><span class="o">|</span>
</span><span class='line'>      <span class="n">memo</span> <span class="o">&lt;&lt;</span> <span class="nb">send</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="k">if</span> <span class="n">pattern</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/</span><span class="si">#{</span><span class="n">params</span><span class="si">}</span><span class="sr">/</span>
</span><span class='line'>      <span class="n">memo</span>
</span><span class='line'>    <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">first_initial</span>
</span><span class='line'>    <span class="vi">@first_name</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last_initial</span>
</span><span class='line'>    <span class="vi">@last_name</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">first_part</span>
</span><span class='line'>    <span class="vi">@first_name</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s1">&#39;first_initial&#39;</span> <span class="p">:</span> <span class="s1">&#39;first_name&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last_part</span>
</span><span class='line'>    <span class="vi">@last_name</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">?</span> <span class="s1">&#39;last_initial&#39;</span> <span class="p">:</span> <span class="s1">&#39;last_name&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Analyzer</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:dataset</span><span class="p">,</span> <span class="ss">:pattern</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@dataset</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="vi">@pattern</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:pattern</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">raw_data</span><span class="p">)</span>
</span><span class='line'>    <span class="n">raw_data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">_</span><span class="p">,</span> <span class="n">email_address</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">,</span> <span class="n">email</span> <span class="o">=</span> <span class="n">email_address</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;@&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">pattern</span> <span class="o">=</span> <span class="vi">@pattern</span><span class="o">.</span><span class="n">find</span>
</span><span class='line'>
</span><span class='line'>      <span class="vi">@dataset</span><span class="o">[</span><span class="n">email</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="vi">@dataset</span><span class="o">[</span><span class="n">email</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">pattern</span> <span class="k">unless</span> <span class="vi">@dataset</span><span class="o">[</span><span class="n">email</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Predictor</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:pattern</span><span class="p">,</span> <span class="ss">:dataset</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@dataset</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:dataset</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@pattern</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:pattern</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">formulate</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">name</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:name</span><span class="o">].</span><span class="n">downcase</span>
</span><span class='line'>    <span class="n">email</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;There is no matching in dataset for </span><span class="si">#{</span><span class="n">attributes</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2"> working for </span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="vi">@dataset</span><span class="o">[</span><span class="n">email</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@dataset</span><span class="o">[</span><span class="n">email</span><span class="o">].</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">pattern</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@pattern</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;@</span><span class="si">#{</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Instructions to run:</span>
</span><span class='line'>
</span><span class='line'><span class="n">raw</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;John Ferguson&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;john.ferguson@alphasights.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Damon Aw&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;damon.aw@alphasights.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Linda Li&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;linda.li@alphasights.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Larry Page&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;larry.p@google.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Sergey Brin&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;s.brin@google.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Steve Jobs&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;s.j@apple.com&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1"># Create a analyzer object and give it a pattern</span>
</span><span class='line'><span class="n">analyzer</span> <span class="o">=</span> <span class="no">Analyzer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">pattern</span><span class="p">:</span> <span class="no">Pattern</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="c1"># Analyze the given dataset</span>
</span><span class='line'><span class="n">analyzer</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
</span><span class='line'><span class="c1"># Create a predictor object and give it a dataset and a pattern</span>
</span><span class='line'><span class="n">predictor</span> <span class="o">=</span> <span class="no">Predictor</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">dataset</span><span class="p">:</span> <span class="n">analyzer</span><span class="o">.</span><span class="n">dataset</span><span class="p">,</span> <span class="ss">pattern</span><span class="p">:</span> <span class="no">Pattern</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Formulate potential patterns for given name and email</span>
</span><span class='line'><span class="n">pp</span> <span class="n">predictor</span><span class="o">.</span><span class="n">formulate</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Criag Silverstein&#39;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;google.com&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">pp</span> <span class="n">predictor</span><span class="o">.</span><span class="n">formulate</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Peter Wong&#39;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;alphasights.com&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">pp</span> <span class="n">predictor</span><span class="o">.</span><span class="n">formulate</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Steve Wozniak&#39;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;apple.com&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">pp</span> <span class="n">predictor</span><span class="o">.</span><span class="n">formulate</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Barack Obama&#39;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;whitehouse.gov&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Specs</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Instruction to run test:</span>
</span><span class='line'><span class="c1"># rspec -fd email_predictor_spec.rb</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./email_predictor&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Pattern</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:pattern</span><span class="p">)</span> <span class="p">{</span> <span class="no">Pattern</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should respond to first name&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:first_name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should respond to last name&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:last_name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#split&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should split name into first_name and last_name if name is separted by white space&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;John Ferguson&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">first_name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">last_name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;Ferguson&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should split name into first_name and last_name if name is separted by .&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;steve.jobs&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">first_name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;steve&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">last_name</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;jobs&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#find&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should generate pattern if first and last are full&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;john.ferguson&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">find</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:first_name_dot_last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should generate pattern if first is initial and last is full&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;j.ferguson&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">find</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:first_initial_dot_last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should generate pattern if first is full and last are initial&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;john.f&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">find</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:first_name_dot_last_initial</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should generate pattern if both are initial&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;j.f&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">find</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="ss">:first_initial_dot_last_initial</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#predict&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should be able to predict for first_name_dot_last_name&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;john ferguson&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="ss">:first_name_dot_last_name</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;john.ferguson&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should be able to predict for first_initial_dot_last_name&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;john ferguson&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="ss">:first_initial_dot_last_name</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;j.ferguson&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should be able to predict for first_name_dot_last_initial&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;john ferguson&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="ss">:first_name_dot_last_initial</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;john.f&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should be able to predict for first_initial_dot_last_initial&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;john ferguson&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="ss">:first_initial_dot_last_initial</span><span class="p">))</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;j.f&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Analyzer</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:pattern</span><span class="p">)</span> <span class="p">{</span> <span class="no">Pattern</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:analyzer</span><span class="p">)</span> <span class="p">{</span> <span class="no">Analyzer</span><span class="o">.</span><span class="n">new</span> <span class="ss">pattern</span><span class="p">:</span> <span class="n">pattern</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should respond to dataset&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">analyzer</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:dataset</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should use hash as dataset&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">analyzer</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_a</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should respond to raw data&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">analyzer</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:pattern</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#process&#39;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:raw</span><span class="p">)</span> <span class="p">{</span> <span class="p">{</span> <span class="s2">&quot;John Ferguson&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;john.ferguson@alphasights.com&quot;</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should use pattern to split name and find pattern&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:split</span><span class="p">)</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:find</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="ss">:first_name_dot_last_name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">analyzer</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should be able to process data based on given rule&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">analyzer</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">analyzer</span><span class="o">.</span><span class="n">dataset</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">analyzer</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;alphasights.com&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:first_name_dot_last_name</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:multiple</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;John Ferguson&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;john.ferguson@alphasights.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Damon Aw&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;damon.aw@alphasights.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Linda Li&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;linda.li@alphasights.com&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Larry Page&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;larry.p@google.com&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should be albe to process data for multiple companies&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">analyzer</span><span class="o">.</span><span class="n">process</span><span class="p">(</span><span class="n">multiple</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">analyzer</span><span class="o">.</span><span class="n">dataset</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">analyzer</span><span class="o">.</span><span class="n">dataset</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s1">&#39;alphasights.com&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:first_name_dot_last_name</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                                      <span class="s1">&#39;google.com&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:first_name_dot_last_initial</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Predictor</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:pattern</span><span class="p">)</span> <span class="p">{</span> <span class="no">Pattern</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:predictor</span><span class="p">)</span> <span class="p">{</span> <span class="no">Predictor</span><span class="o">.</span><span class="n">new</span> <span class="ss">pattern</span><span class="p">:</span> <span class="n">pattern</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should respond to dataset&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">predictor</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:dataset</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should respond to pattern&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">predictor</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">respond_to</span><span class="p">(</span><span class="ss">:pattern</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;#formulate&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should not formulate a email address if company is not given in the dataest&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">predictor</span> <span class="o">=</span> <span class="no">Predictor</span><span class="o">.</span><span class="n">new</span> <span class="ss">pattern</span><span class="p">:</span> <span class="n">pattern</span><span class="p">,</span> <span class="ss">dataset</span><span class="p">:</span> <span class="p">{}</span>
</span><span class='line'>      <span class="n">attributes</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Barack Obama&#39;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;whitehouse.gov&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="n">predictor</span><span class="o">.</span><span class="n">formulate</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="s2">&quot;There is no matching in dataset for </span><span class="si">#{</span><span class="n">attributes</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2"> working for </span><span class="si">#{</span><span class="n">attributes</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should use pattern to split name and predict email&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">predictor</span> <span class="o">=</span> <span class="no">Predictor</span><span class="o">.</span><span class="n">new</span> <span class="ss">pattern</span><span class="p">:</span> <span class="n">pattern</span><span class="p">,</span> <span class="ss">dataset</span><span class="p">:</span> <span class="p">{</span> <span class="s1">&#39;alphasights.com&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:first_name_dot_last_name</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">attributes</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Peter Wong&#39;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;alphasights.com&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:split</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      <span class="n">pattern</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:predict</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="s1">&#39;peter.wong&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">predictor</span><span class="o">.</span><span class="n">formulate</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should predict email address based if one pattern exist&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">predictor</span> <span class="o">=</span> <span class="no">Predictor</span><span class="o">.</span><span class="n">new</span> <span class="ss">pattern</span><span class="p">:</span> <span class="n">pattern</span><span class="p">,</span> <span class="ss">dataset</span><span class="p">:</span> <span class="p">{</span> <span class="s1">&#39;alphasights.com&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:first_name_dot_last_name</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">attributes</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Peter Wong&#39;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;alphasights.com&#39;</span><span class="p">}</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="n">predictor</span><span class="o">.</span><span class="n">formulate</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eql</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;peter.wong@alphasights.com&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should predict email address based if multiple patterns exist&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">predictor</span> <span class="o">=</span> <span class="no">Predictor</span><span class="o">.</span><span class="n">new</span> <span class="ss">pattern</span><span class="p">:</span> <span class="n">pattern</span><span class="p">,</span> <span class="ss">dataset</span><span class="p">:</span> <span class="p">{</span> <span class="s1">&#39;google.com&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:first_name_dot_last_initial</span><span class="p">,</span> <span class="ss">:first_initial_dot_last_name</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">attributes</span> <span class="o">=</span> <span class="p">{</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Criag Silverstein&#39;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;google.com&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">response</span> <span class="o">=</span> <span class="n">predictor</span><span class="o">.</span><span class="n">formulate</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">match_array</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;c.silverstein@google.com&#39;</span><span class="p">,</span> <span class="s1">&#39;criag.s@google.com&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extract Values From Javascript Nested Object]]></title>
    <link href="http://haozeng.github.io/blog/2014/03/23/test/"/>
    <updated>2014-03-23T11:00:09-07:00</updated>
    <id>http://haozeng.github.io/blog/2014/03/23/test</id>
    <content type="html"><![CDATA[<p>Underscore doesn&rsquo;t support search and find nested value in a nested javascript object,
So I went ahead and built a version for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># This helper is served to relieve the efforts of building up external formatted object through</span>
</span><span class='line'><span class="c1"># nested object which we retrieve from mongoDB or http params</span>
</span><span class='line'><span class="c1"># Usage:</span>
</span><span class='line'><span class="c1">#     SampleData =</span>
</span><span class='line'><span class="c1">#       token: &#39;1234&#39;,</span>
</span><span class='line'><span class="c1">#       user:</span>
</span><span class='line'><span class="c1">#         token: &#39;4321&#39;</span>
</span><span class='line'><span class="c1">#       contact:</span>
</span><span class='line'><span class="c1">#         address:</span>
</span><span class='line'><span class="c1">#           city: &#39;Emeryville&#39;</span>
</span><span class='line'><span class="c1">#           state: &#39;CA&#39;</span>
</span><span class='line'><span class="c1">#           zip_code: &#39;51421&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># All we need to do is</span>
</span><span class='line'><span class="c1"># Helper.DataPicker(SampleData, &#39;token&#39;, &#39;user.token&#39;, &#39;city&#39;)</span>
</span><span class='line'><span class="c1"># For nested key with the duplicated names, we need to nest the top parents nodes as well.</span>
</span><span class='line'><span class="c1"># For example &#39;user.token&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">_ = </span><span class="nx">require</span> <span class="s">&#39;underscore&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DataPicker = </span><span class="nf">(data, attributes...) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">result = </span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Loop through each pair of data and find the matching attributes</span>
</span><span class='line'>  <span class="nx">_</span><span class="p">.</span><span class="nx">each</span> <span class="nx">data</span><span class="p">,</span> <span class="nf">(value, key, list) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">_</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">and</span> <span class="p">(</span><span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="o">or</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>
</span><span class='line'>      <span class="nx">result</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">||=</span> <span class="nx">value</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">and</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">subKey</span><span class="p">,</span> <span class="nx">subValue</span> <span class="k">of</span> <span class="nx">value</span>
</span><span class='line'>        <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="nx">subValue</span><span class="p">,</span> <span class="nx">subKey</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Loop through nested cases like user.token, merchant.token</span>
</span><span class='line'>  <span class="nx">_</span><span class="p">.</span><span class="nx">each</span> <span class="nx">attributes</span><span class="p">,</span> <span class="nf">(attribute) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">attribute</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^[a-z]+[.]/</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">keys = </span><span class="nx">attribute</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">element = </span><span class="nx">keys</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">nestedElement = </span><span class="nx">_</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nf">(memo, num) -&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">memo</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">memo = </span><span class="nx">memo</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span>
</span><span class='line'>      <span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">result</span><span class="p">[</span><span class="nx">element</span><span class="p">]</span> <span class="o">=</span> <span class="nx">nestedElement</span> <span class="k">if</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">nestedElement</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'>
</span><span class='line'><span class="nv">module.exports = </span><span class="nx">DataPicker</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DFS and BFS in Ruby Using Simple Tree Objects]]></title>
    <link href="http://haozeng.github.io/blog/2014/01/05/trees-in-ruby/"/>
    <updated>2014-01-05T08:54:11-08:00</updated>
    <id>http://haozeng.github.io/blog/2014/01/05/trees-in-ruby</id>
    <content type="html"><![CDATA[<p>In Ruby, there is no existing pre-built tree structures available, but it is pretty easy to define
tree objects. Here is the an exmaple which DFS and BFS are performed using ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Node</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:value</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span><span class="p">,</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="vi">@value</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">children</span>
</span><span class='line'>    <span class="o">[</span><span class="vi">@left</span><span class="p">,</span> <span class="vi">@right</span><span class="o">].</span><span class="n">compact</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">children?</span>
</span><span class='line'>    <span class="vi">@left</span> <span class="o">&amp;&amp;</span> <span class="vi">@right</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">no_children?</span>
</span><span class='line'>    <span class="o">!</span><span class="n">children?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">root</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;root&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">child_1</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;child_1&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">child_2</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;child_2&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">grand_child_1</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;grand_child_1&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">grand_grand_child_1</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;grand_grand_child_1&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">grand_child_1</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">grand_grand_child_1</span>
</span><span class='line'><span class="n">child_1</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">grand_child_1</span>
</span><span class='line'><span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">child_1</span>
</span><span class='line'><span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">child_2</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>  <span class="n">queue</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">queue</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">queue</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">n</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>    <span class="n">n</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span><span class='line'>      <span class="n">queue</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;~~~~~~~~~~~~~~~~~~~~~~~~~~~&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">node</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>  <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span><span class='line'>    <span class="n">dfs</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rotx and Compromise]]></title>
    <link href="http://haozeng.github.io/blog/2013/09/27/rotx-and-compromise/"/>
    <updated>2013-09-27T20:36:18-07:00</updated>
    <id>http://haozeng.github.io/blog/2013/09/27/rotx-and-compromise</id>
    <content type="html"><![CDATA[<p>Rotx exercise:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rotx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">encrypt</span><span class="o">=</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="n">letters</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">letter</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">letter</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/[a-zA-Z]/</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># Looking for index</span>
</span><span class='line'>      <span class="n">index</span> <span class="o">=</span> <span class="n">letter</span> <span class="o">==</span> <span class="n">letter</span><span class="o">.</span><span class="n">downcase</span> <span class="p">?</span> <span class="n">letters</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span> <span class="p">:</span> <span class="n">letters</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">letter</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Building rotated index either by moving forward or backward</span>
</span><span class='line'>      <span class="n">rotated_index</span> <span class="o">=</span> <span class="n">encrypt</span> <span class="p">?</span> <span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">x</span><span class="p">)</span><span class="o">%</span><span class="mi">26</span> <span class="p">:</span> <span class="p">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span><span class="o">%</span><span class="mi">26</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Building new letter based on rotated index</span>
</span><span class='line'>      <span class="n">letter</span> <span class="o">==</span> <span class="n">letter</span><span class="o">.</span><span class="n">downcase</span> <span class="p">?</span> <span class="n">letters</span><span class="o">[</span><span class="n">rotated_index</span><span class="o">]</span> <span class="p">:</span> <span class="n">letters</span><span class="o">[</span><span class="n">rotated_index</span><span class="o">].</span><span class="n">upcase</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">letter</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;Test #rotx&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should rotate the string and encrypt as default&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">rotx</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;Hello, World&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="s1">&#39;Rovvy, Gybvn&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should rotate back the string if encrypt is false&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">rotx</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;Rovvy, Gybvn&#39;</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="s1">&#39;Hello, World&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should return the same results if roration number is added 26&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">rotx</span><span class="p">(</span><span class="mi">36</span><span class="p">,</span> <span class="s1">&#39;Hello, World&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="s1">&#39;Rovvy, Gybvn&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simple compromise implementation, and this will build the foundation in removing callbacks in node.js app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Promise</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Promise</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">resolve</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;A promise should only be able to be resolved once !&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">triggerCallbacks</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Promise</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">success</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">triggerCallbacks</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Promise</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">triggerCallbacks</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">callbacks</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">self</span><span class="p">,</span><span class="nx">self</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">bar</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bar</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Throw errors if one promise tries to resolve twice</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">foobar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'><span class="nx">foobar</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">foobar</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Streaming Retweets]]></title>
    <link href="http://haozeng.github.io/blog/2013/05/08/twitter-streaming-retweets/"/>
    <updated>2013-05-08T22:46:49-07:00</updated>
    <id>http://haozeng.github.io/blog/2013/05/08/twitter-streaming-retweets</id>
    <content type="html"><![CDATA[<p>Recently, I did an exercise using twitter streaming api to generate the most recent 10
retweets in the past n minutes.</p>

<p>The program is pretty simple. It sends http streaming requests to twitter api and doing sorting in the background thread, while the main thread is printing out the most recent 10 retweets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;twitter&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pp&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Streamer</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:client</span><span class="p">,</span> <span class="ss">:background_thread</span><span class="p">,</span> <span class="ss">:mins</span><span class="p">,</span> <span class="ss">:container</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@client</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:client</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@mins</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:mins</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@container</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:container</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">stream</span>
</span><span class='line'>    <span class="vi">@background_thread</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>      <span class="vi">@client</span><span class="o">.</span><span class="n">sample</span> <span class="k">do</span> <span class="o">|</span><span class="n">object</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">object</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="ss">Twitter</span><span class="p">:</span><span class="ss">:Tweet</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@container</span><span class="o">[</span><span class="n">object</span><span class="o">.</span><span class="n">created_at</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>          <span class="vi">@container</span><span class="o">[</span><span class="n">object</span><span class="o">.</span><span class="n">created_at</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">object</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="c1"># Container will only keep tweets which are 5 mins up to date</span>
</span><span class='line'>        <span class="vi">@container</span><span class="o">.</span><span class="n">keep_if</span> <span class="p">{</span><span class="o">|</span><span class="n">time</span><span class="p">,</span> <span class="n">tweet</span><span class="o">|</span> <span class="vi">@mins</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">time</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">stop</span>
</span><span class='line'>    <span class="no">Thread</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="vi">@background_thread</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Massager</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:raw_tweets</span><span class="p">,</span> <span class="ss">:top_tweets</span><span class="p">,</span> <span class="ss">:container</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@container</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:container</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">top_tweets</span>
</span><span class='line'>    <span class="n">build</span>
</span><span class='line'>    <span class="n">sort</span>
</span><span class='line'>    <span class="nb">format</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">build</span>
</span><span class='line'>    <span class="vi">@raw_tweets</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@container</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">tweet</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@raw_tweets</span><span class="o">[</span><span class="n">tweet</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sort</span>
</span><span class='line'>    <span class="vi">@raw_tweets</span> <span class="o">=</span> <span class="vi">@raw_tweets</span><span class="o">.</span><span class="n">sort</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">}</span><span class="o">.</span><span class="n">last</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">format</span>
</span><span class='line'>    <span class="vi">@raw_tweets</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>      <span class="n">memo</span><span class="o">[</span><span class="n">value</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">||=</span> <span class="o">[]</span>
</span><span class='line'>      <span class="n">memo</span><span class="o">[</span><span class="n">value</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>      <span class="n">memo</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Manager</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:container</span><span class="p">,</span> <span class="ss">:streamer</span><span class="p">,</span> <span class="ss">:massager</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">attributes</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@container</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="vi">@streamer</span> <span class="o">=</span> <span class="no">Streamer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">container</span><span class="p">:</span> <span class="vi">@container</span><span class="p">,</span> <span class="ss">mins</span><span class="p">:</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:mins</span><span class="o">]</span><span class="p">,</span> <span class="ss">client</span><span class="p">:</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:client</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@massager</span> <span class="o">=</span> <span class="no">Massager</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">container</span><span class="p">:</span> <span class="vi">@container</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="ss">Twitter</span><span class="p">:</span><span class="ss">:Streaming</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_key</span>        <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">consumer_secret</span>     <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">access_token</span>        <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">access_token_secret</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">mins</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">manager</span> <span class="o">=</span> <span class="no">Manager</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">mins</span><span class="p">:</span> <span class="n">mins</span><span class="p">,</span> <span class="ss">client</span><span class="p">:</span> <span class="n">client</span><span class="p">)</span>
</span><span class='line'><span class="n">manager</span><span class="o">.</span><span class="n">streamer</span><span class="o">.</span><span class="n">stream</span>
</span><span class='line'>
</span><span class='line'><span class="n">start_time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">window_start</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="n">start_time</span> <span class="o">&gt;</span> <span class="mi">60</span><span class="o">*</span><span class="n">mins</span> <span class="p">?</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">60</span><span class="o">*</span><span class="n">mins</span> <span class="p">:</span> <span class="n">start_time</span>
</span><span class='line'>  <span class="nb">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;------------- Top Ten Tweets from </span><span class="si">#{</span><span class="n">window_start</span><span class="si">}</span><span class="s2"> To </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2"> ---------------&quot;</span>
</span><span class='line'>  <span class="n">pp</span> <span class="n">manager</span><span class="o">.</span><span class="n">massager</span><span class="o">.</span><span class="n">top_tweets</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Min_stack]]></title>
    <link href="http://haozeng.github.io/blog/2013/02/10/min-stack/"/>
    <updated>2013-02-10T20:28:21-08:00</updated>
    <id>http://haozeng.github.io/blog/2013/02/10/min-stack</id>
    <content type="html"><![CDATA[<p>This is a typical interview question which is going to ask you to implement a stack
which can track the max/min value for the current stack. The solution posted here will only show how min-stack is implemented, and max-stack can be developed similarly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pp&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Stack</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:stack</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@stack</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pop</span>
</span><span class='line'>    <span class="vi">@stack</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">peek</span>
</span><span class='line'>    <span class="vi">@stack</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MinStack</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:min_stack</span><span class="p">,</span> <span class="ss">:stack</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@min_stack</span> <span class="o">=</span> <span class="no">Stack</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@stack</span> <span class="o">=</span> <span class="no">Stack</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">push</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@stack</span><span class="o">.</span><span class="n">peek</span> <span class="o">&amp;&amp;</span> <span class="vi">@stack</span><span class="o">.</span><span class="n">peek</span> <span class="o">&lt;</span> <span class="n">element</span>
</span><span class='line'>      <span class="vi">@min_stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="vi">@stack</span><span class="o">.</span><span class="n">peek</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@min_stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="vi">@stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pop</span>
</span><span class='line'>    <span class="vi">@stack</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;The minimun is </span><span class="si">#{</span><span class="vi">@min_stack</span><span class="o">.</span><span class="n">pop</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">min_stack</span> <span class="o">=</span> <span class="no">MinStack</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">min_stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="n">min_stack</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Multiple Varariables With Differentreferences in Ruby]]></title>
    <link href="http://haozeng.github.io/blog/2013/01/30/multiple-variables-same-value-in-ruby/"/>
    <updated>2013-01-30T19:25:50-08:00</updated>
    <id>http://haozeng.github.io/blog/2013/01/30/multiple-variables-same-value-in-ruby</id>
    <content type="html"><![CDATA[<p>Today I had a bug in ruby which I do not quite understand, and it turned out to be reference issue in ruby.</p>

<p>First, I tried something like this and intended to create 4 variables for the same values, but different objects</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="p">,</span><span class="n">d</span> <span class="o">=</span> <span class="o">[</span><span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="o">]</span> <span class="o">*</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>This turns out to be a, b, c, d refers to the same object</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">object_id</span> <span class="o">==</span> <span class="n">b</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the correct way should be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="no">Object</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
