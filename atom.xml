<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hao's Blog]]></title>
  <link href="http://haozeng.github.io/atom.xml" rel="self"/>
  <link href="http://haozeng.github.io/"/>
  <updated>2014-03-27T20:39:58-07:00</updated>
  <id>http://haozeng.github.io/</id>
  <author>
    <name><![CDATA[Hao Zeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rotx and Compromise]]></title>
    <link href="http://haozeng.github.io/blog/2014/03/27/rotx-and-compromise/"/>
    <updated>2014-03-27T20:36:18-07:00</updated>
    <id>http://haozeng.github.io/blog/2014/03/27/rotx-and-compromise</id>
    <content type="html"><![CDATA[<p>Rotx exercise:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rotx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">string</span><span class="p">,</span> <span class="n">encrypt</span><span class="o">=</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="n">letters</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map!</span> <span class="k">do</span> <span class="o">|</span><span class="n">letter</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">letter</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/[a-zA-Z]/</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># Looking for index</span>
</span><span class='line'>      <span class="n">index</span> <span class="o">=</span> <span class="n">letter</span> <span class="o">==</span> <span class="n">letter</span><span class="o">.</span><span class="n">downcase</span> <span class="p">?</span> <span class="n">letters</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">letter</span><span class="p">)</span> <span class="p">:</span> <span class="n">letters</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">letter</span><span class="o">.</span><span class="n">downcase</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Building rotated index either by moving forward or backward</span>
</span><span class='line'>      <span class="n">rotated_index</span> <span class="o">=</span> <span class="n">encrypt</span> <span class="p">?</span> <span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">x</span><span class="p">)</span><span class="o">%</span><span class="mi">26</span> <span class="p">:</span> <span class="p">(</span><span class="n">index</span> <span class="o">-</span> <span class="n">x</span><span class="p">)</span><span class="o">%</span><span class="mi">26</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Building new letter based on rotated index</span>
</span><span class='line'>      <span class="n">letter</span> <span class="o">==</span> <span class="n">letter</span><span class="o">.</span><span class="n">downcase</span> <span class="p">?</span> <span class="n">letters</span><span class="o">[</span><span class="n">rotated_index</span><span class="o">]</span> <span class="p">:</span> <span class="n">letters</span><span class="o">[</span><span class="n">rotated_index</span><span class="o">].</span><span class="n">upcase</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">letter</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;Test #rotx&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should rotate the string and encrypt as default&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">rotx</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;Hello, World&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="s1">&#39;Rovvy, Gybvn&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should rotate back the string if encrypt is false&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">rotx</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="s1">&#39;Rovvy, Gybvn&#39;</span><span class="p">,</span> <span class="kp">false</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="s1">&#39;Hello, World&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;should return the same results if roration number is added 26&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">rotx</span><span class="p">(</span><span class="mi">36</span><span class="p">,</span> <span class="s1">&#39;Hello, World&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="s1">&#39;Rovvy, Gybvn&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A simple compromise implementation, and this will build the foundation in removing callbacks in node.js app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Promise</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">success</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">fn</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resolve</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">list</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Promise</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">bar</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">foo</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extract Values From Javascript Nested Object]]></title>
    <link href="http://haozeng.github.io/blog/2014/03/23/test/"/>
    <updated>2014-03-23T11:00:09-07:00</updated>
    <id>http://haozeng.github.io/blog/2014/03/23/test</id>
    <content type="html"><![CDATA[<p>Underscore doesn&rsquo;t support search and find nested value in a nested javascript object,
So I went ahead and built a version for that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># This helper is served to relieve the efforts of building up external formatted object through</span>
</span><span class='line'><span class="c1"># nested object which we retrieve from mongoDB or http params</span>
</span><span class='line'><span class="c1"># Usage:</span>
</span><span class='line'><span class="c1">#     SampleData =</span>
</span><span class='line'><span class="c1">#       token: &#39;1234&#39;,</span>
</span><span class='line'><span class="c1">#       user:</span>
</span><span class='line'><span class="c1">#         token: &#39;4321&#39;</span>
</span><span class='line'><span class="c1">#       contact:</span>
</span><span class='line'><span class="c1">#         address:</span>
</span><span class='line'><span class="c1">#           city: &#39;Emeryville&#39;</span>
</span><span class='line'><span class="c1">#           state: &#39;CA&#39;</span>
</span><span class='line'><span class="c1">#           zip_code: &#39;51421&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># All we need to do is</span>
</span><span class='line'><span class="c1"># Helper.DataPicker(SampleData, &#39;token&#39;, &#39;user.token&#39;, &#39;city&#39;)</span>
</span><span class='line'><span class="c1"># For nested key with the duplicated names, we need to nest the top parents nodes as well.</span>
</span><span class='line'><span class="c1"># For example &#39;user.token&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">_ = </span><span class="nx">require</span> <span class="s">&#39;underscore&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DataPicker = </span><span class="nf">(data, attributes...) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">result = </span><span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Loop through each pair of data and find the matching attributes</span>
</span><span class='line'>  <span class="nx">_</span><span class="p">.</span><span class="nx">each</span> <span class="nx">data</span><span class="p">,</span> <span class="nf">(value, key, list) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">_</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="o">and</span> <span class="p">(</span><span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">key</span><span class="p">])</span> <span class="o">or</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span>
</span><span class='line'>      <span class="nx">result</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">||=</span> <span class="nx">value</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="nx">_</span><span class="p">.</span><span class="nx">isObject</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">and</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">subKey</span><span class="p">,</span> <span class="nx">subValue</span> <span class="k">of</span> <span class="nx">value</span>
</span><span class='line'>        <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="nx">subValue</span><span class="p">,</span> <span class="nx">subKey</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Loop through nested cases like user.token, merchant.token</span>
</span><span class='line'>  <span class="nx">_</span><span class="p">.</span><span class="nx">each</span> <span class="nx">attributes</span><span class="p">,</span> <span class="nf">(attribute) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">attribute</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^[a-z]+[.]/</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">keys = </span><span class="nx">attribute</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">element = </span><span class="nx">keys</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">nestedElement = </span><span class="nx">_</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="nf">(memo, num) -&gt;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">memo</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">memo = </span><span class="nx">memo</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span>
</span><span class='line'>      <span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">result</span><span class="p">[</span><span class="nx">element</span><span class="p">]</span> <span class="o">=</span> <span class="nx">nestedElement</span> <span class="k">if</span> <span class="o">!</span><span class="nx">_</span><span class="p">.</span><span class="nx">isUndefined</span><span class="p">(</span><span class="nx">nestedElement</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">result</span>
</span><span class='line'>
</span><span class='line'><span class="nv">module.exports = </span><span class="nx">DataPicker</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DFS and BFS in Ruby Using Simple Tree Objects]]></title>
    <link href="http://haozeng.github.io/blog/2014/01/05/trees-in-ruby/"/>
    <updated>2014-01-05T08:54:11-08:00</updated>
    <id>http://haozeng.github.io/blog/2014/01/05/trees-in-ruby</id>
    <content type="html"><![CDATA[<p>In Ruby, there is no existing pre-built tree structures available, but it is pretty easy to define
tree objects. Here is the an exmaple which DFS and BFS are performed using ruby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Node</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:value</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span><span class="p">,</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>    <span class="vi">@value</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">children</span>
</span><span class='line'>    <span class="o">[</span><span class="vi">@left</span><span class="p">,</span> <span class="vi">@right</span><span class="o">].</span><span class="n">compact</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">children?</span>
</span><span class='line'>    <span class="vi">@left</span> <span class="o">&amp;&amp;</span> <span class="vi">@right</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">no_children?</span>
</span><span class='line'>    <span class="o">!</span><span class="n">children?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">root</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;root&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">child_1</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;child_1&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">child_2</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;child_2&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">grand_child_1</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;grand_child_1&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">grand_grand_child_1</span> <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;grand_grand_child_1&#39;</span><span class="p">})</span>
</span><span class='line'><span class="n">grand_child_1</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">grand_grand_child_1</span>
</span><span class='line'><span class="n">child_1</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">grand_child_1</span>
</span><span class='line'><span class="n">root</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">child_1</span>
</span><span class='line'><span class="n">root</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">child_2</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>  <span class="n">queue</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">queue</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">queue</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">n</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>    <span class="n">n</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span><span class='line'>      <span class="n">queue</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">bfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s1">&#39;~~~~~~~~~~~~~~~~~~~~~~~~~~~&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">node</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>  <span class="n">node</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
</span><span class='line'>    <span class="n">dfs</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">dfs</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
